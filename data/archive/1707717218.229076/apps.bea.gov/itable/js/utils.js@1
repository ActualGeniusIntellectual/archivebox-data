// JavaScript Document
$(function () {
    utils.init();
});
var utils = new (function (window, $) {
    "use strict";
    var obj = this;
    this.init = function () {

    };
    this.isInt = function (n) {
        return typeof n === 'number' && n % 1 == 0;
    };
    this.testForArray = function (obj, len, type) {
        if (!obj) {
            if (len) {
                var arr = [];
                var s = function (type) {
                    var t = this;
                    if (type)
                        $(type).each(function (key, value) {
                            t[key] = value;
                        });
                }

                for (var i = 0; i < len; i++) {
                    arr.push(new s(type));
                }
                return arr;
            }
            return [];
        }
        return obj = [].concat(obj);
    };
    this.getUrlParams = function () {
        var match,
            pl = /\+/g,  // Regex for replacing addition symbol with a space
            search = /([^&=]+)=?([^&]*)/g,
            decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
            query = window.location.search.substring(1);

        var urlParams = {};
        while (match = search.exec(query))
            urlParams[decode(match[1]).toLowerCase()] = decode(match[2]);
        return urlParams;
    };
    this.InArray = function (item, array, attr) {
        if (!item)
            return -1;
        if (!array)
            return -1;
        if (!attr)
            return array.indexOf(item);
        for (var i = 0; i < array.length; i++)
            if (array[i][attr] == item[attr])
                return i;
        return -1;

    };
    this.isIE = function () {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        return (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))  // If Internet Explorer, return version number
    };
    this.isBootstrap = function () {
        return typeof ($.fn.popover) != 'undefined'
    };
    this.toBinary = function(string) {
        /*const codeUnits = new Uint16Array(string.length);
        for (let i = 0; i < codeUnits.length; i++) {
            codeUnits[i] = string.charCodeAt(i);
        }
        return String.fromCharCode(...new Uint8Array(codeUnits.buffer));*/
        let utf8Bytes = encodeURIComponent(string).replace(/%([0-9A-F]{2})/g, function (match, p1) {
            return String.fromCharCode('0x' + p1);
        });

        return btoa(utf8Bytes);
    }
    this.ObjToLowerCase = function(obj){
        let newObj;
        try{
            newObj = Object.fromEntries(
                Object.entries(obj).map(([k, v]) => [k.toLowerCase(), v])
            );
        }
        catch(e){
            let key, keys = Object.keys(obj);
            let n = keys.length;
            newObj = {};
            while (n--) {
                key = keys[n];
                newObj[key.toLowerCase()] = obj[key];
            }
        }
        return newObj;
    }
    this.ObjToUpperCase = function(obj){
        let newObj;
        try{
            newObj = Object.fromEntries(
                Object.entries(obj).map(([k, v]) => [k.toUpperCase(), v])
            );
        }
        catch(e){
            let key, keys = Object.keys(obj);
            let n = keys.length;
            newObj = {};
            while (n--) {
                key = keys[n];
                newObj[key.toUpperCase()] = obj[key];
            }
        }
        return newObj;
    }
    this.getDate = function(){
        const currentDate = new Date();
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        return currentDate.toLocaleDateString('en-US', options);
    }
})(window, jQuery);
